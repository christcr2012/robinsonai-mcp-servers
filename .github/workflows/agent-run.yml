name: Agent Run

on:
  pull_request:
    types: [labeled, synchronize]
  issue_comment:
    types: [created]

jobs:
  agent-run:
    # Only run if PR has 'agent:run' label or comment contains 'agent:run <slug>'
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'agent:run')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, 'agent:run'))
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build agent
        run: npm run build --workspace=@robinsonai/free-agent-mcp
      
      - name: Extract task slug from label or comment
        id: extract-slug
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Extract from PR body or use default
            SLUG=$(echo "${{ github.event.pull_request.body }}" | grep -oP 'agent:run \K\S+' || echo "default")
          else
            # Extract from comment
            SLUG=$(echo "${{ github.event.comment.body }}" | grep -oP 'agent:run \K\S+' || echo "default")
          fi
          echo "slug=$SLUG" >> $GITHUB_OUTPUT
      
      - name: Run agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}
        run: |
          npx ts-node packages/free-agent-mcp/src/agents/agent-cli.ts run --task ${{ steps.extract-slug.outputs.slug }}
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-artifacts-${{ steps.extract-slug.outputs.slug }}
          path: artifacts/
      
      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const slug = '${{ steps.extract-slug.outputs.slug }}';
            const reportPath = path.join('artifacts', slug, 'report.json');
            
            if (!fs.existsSync(reportPath)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ Agent run failed - no report generated'
              });
              return;
            }
            
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf-8'));
            
            const status = report.verdict === 'accept' ? '✅' : '❌';
            const body = `
            ## ${status} Agent Run: ${report.name}
            
            **Verdict:** ${report.verdict}
            **Iterations:** ${report.iterations}
            
            ### Quality Gates
            - **Compiled:** ${report.compiled ? '✅' : '❌'}
            - **Lint Errors:** ${report.lintErrors.length}
            - **Type Errors:** ${report.typeErrors.length}
            - **Tests:** ${report.test.passed} passed, ${report.test.failed} failed
            - **Coverage:** ${report.test.coveragePct || 'N/A'}%
            - **Schema Errors:** ${report.schemaErrors.length}
            - **Boundary Errors:** ${report.boundaryErrors.length}
            
            ### Scores
            - **Compilation:** ${report.scores.compilation}
            - **Tests (Functional):** ${report.scores.tests_functional}
            - **Tests (Edge Cases):** ${report.scores.tests_edge}
            - **Types:** ${report.scores.types}
            - **Style:** ${report.scores.style}
            - **Security:** ${report.scores.security}
            ${report.scores.boundaries !== undefined ? `- **Boundaries:** ${report.scores.boundaries}` : ''}
            ${report.scores.schema !== undefined ? `- **Schema:** ${report.scores.schema}` : ''}
            
            ### Summary
            ${report.summary}
            
            [View full artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

