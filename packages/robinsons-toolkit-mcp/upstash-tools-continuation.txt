        // ============================================================
        // UPSTASH REDIS REST API - HASH OPERATIONS (15 tools)
        // ============================================================
        { name: 'upstash_redis_hset', description: 'Set field in a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' }, value: { type: 'string', description: 'Field value' } }, required: ['key', 'field', 'value'] } },
        { name: 'upstash_redis_hget', description: 'Get field value from a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' } }, required: ['key', 'field'] } },
        { name: 'upstash_redis_hgetall', description: 'Get all fields and values from a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' } }, required: ['key'] } },
        { name: 'upstash_redis_hdel', description: 'Delete one or more hash fields', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, fields: { type: 'array', items: { type: 'string' }, description: 'Field names to delete' } }, required: ['key', 'fields'] } },
        { name: 'upstash_redis_hexists', description: 'Check if a hash field exists', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' } }, required: ['key', 'field'] } },
        { name: 'upstash_redis_hkeys', description: 'Get all field names in a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' } }, required: ['key'] } },
        { name: 'upstash_redis_hvals', description: 'Get all values in a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' } }, required: ['key'] } },
        { name: 'upstash_redis_hlen', description: 'Get the number of fields in a hash', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' } }, required: ['key'] } },
        { name: 'upstash_redis_hincrby', description: 'Increment hash field by integer', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' }, increment: { type: 'number', description: 'Increment amount' } }, required: ['key', 'field', 'increment'] } },
        { name: 'upstash_redis_hincrbyfloat', description: 'Increment hash field by float', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' }, increment: { type: 'number', description: 'Float increment' } }, required: ['key', 'field', 'increment'] } },
        { name: 'upstash_redis_hmget', description: 'Get multiple hash field values', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, fields: { type: 'array', items: { type: 'string' }, description: 'Field names' } }, required: ['key', 'fields'] } },
        { name: 'upstash_redis_hmset', description: 'Set multiple hash fields', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, fields: { type: 'object', description: 'Field-value pairs' } }, required: ['key', 'fields'] } },
        { name: 'upstash_redis_hsetnx', description: 'Set hash field only if it does not exist', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' }, value: { type: 'string', description: 'Value' } }, required: ['key', 'field', 'value'] } },
        { name: 'upstash_redis_hstrlen', description: 'Get length of hash field value', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, field: { type: 'string', description: 'Field name' } }, required: ['key', 'field'] } },
        { name: 'upstash_redis_hscan', description: 'Incrementally iterate hash fields', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Hash key' }, cursor: { type: 'string', description: 'Cursor' }, match: { type: 'string', description: 'Pattern' }, count: { type: 'number', description: 'Count hint' } }, required: ['key', 'cursor'] } },

        // ============================================================
        // UPSTASH REDIS REST API - LIST OPERATIONS (14 tools)
        // ============================================================
        { name: 'upstash_redis_lpush', description: 'Prepend one or multiple values to a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, values: { type: 'array', items: { type: 'string' }, description: 'Values to prepend' } }, required: ['key', 'values'] } },
        { name: 'upstash_redis_rpush', description: 'Append one or multiple values to a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, values: { type: 'array', items: { type: 'string' }, description: 'Values to append' } }, required: ['key', 'values'] } },
        { name: 'upstash_redis_lpop', description: 'Remove and get the first element in a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, count: { type: 'number', description: 'Number of elements to pop (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_rpop', description: 'Remove and get the last element in a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, count: { type: 'number', description: 'Number of elements to pop (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_lrange', description: 'Get a range of elements from a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, start: { type: 'number', description: 'Start index' }, stop: { type: 'number', description: 'Stop index' } }, required: ['key', 'start', 'stop'] } },
        { name: 'upstash_redis_llen', description: 'Get the length of a list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' } }, required: ['key'] } },
        { name: 'upstash_redis_lindex', description: 'Get element at index in list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, index: { type: 'number', description: 'Index' } }, required: ['key', 'index'] } },
        { name: 'upstash_redis_lset', description: 'Set element at index in list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, index: { type: 'number', description: 'Index' }, value: { type: 'string', description: 'Value' } }, required: ['key', 'index', 'value'] } },
        { name: 'upstash_redis_lrem', description: 'Remove elements from list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, count: { type: 'number', description: 'Count' }, value: { type: 'string', description: 'Value to remove' } }, required: ['key', 'count', 'value'] } },
        { name: 'upstash_redis_ltrim', description: 'Trim list to specified range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, start: { type: 'number', description: 'Start index' }, stop: { type: 'number', description: 'Stop index' } }, required: ['key', 'start', 'stop'] } },
        { name: 'upstash_redis_linsert', description: 'Insert element before or after pivot in list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, position: { type: 'string', description: 'BEFORE or AFTER' }, pivot: { type: 'string', description: 'Pivot element' }, element: { type: 'string', description: 'Element to insert' } }, required: ['key', 'position', 'pivot', 'element'] } },
        { name: 'upstash_redis_rpoplpush', description: 'Remove last element from list and push to another list', inputSchema: { type: 'object', properties: { source: { type: 'string', description: 'Source list' }, destination: { type: 'string', description: 'Destination list' } }, required: ['source', 'destination'] } },
        { name: 'upstash_redis_lpos', description: 'Get position of element in list', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'List key' }, element: { type: 'string', description: 'Element to find' }, rank: { type: 'number', description: 'Rank (optional)' }, count: { type: 'number', description: 'Count (optional)' }, maxlen: { type: 'number', description: 'Max length (optional)' } }, required: ['key', 'element'] } },
        { name: 'upstash_redis_lmove', description: 'Move element from one list to another', inputSchema: { type: 'object', properties: { source: { type: 'string', description: 'Source list' }, destination: { type: 'string', description: 'Destination list' }, from: { type: 'string', description: 'LEFT or RIGHT' }, to: { type: 'string', description: 'LEFT or RIGHT' } }, required: ['source', 'destination', 'from', 'to'] } },

        // ============================================================
        // UPSTASH REDIS REST API - SET OPERATIONS (15 tools)
        // ============================================================
        { name: 'upstash_redis_sadd', description: 'Add one or more members to a set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, members: { type: 'array', items: { type: 'string' }, description: 'Members to add' } }, required: ['key', 'members'] } },
        { name: 'upstash_redis_smembers', description: 'Get all members of a set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' } }, required: ['key'] } },
        { name: 'upstash_redis_srem', description: 'Remove one or more members from a set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, members: { type: 'array', items: { type: 'string' }, description: 'Members to remove' } }, required: ['key', 'members'] } },
        { name: 'upstash_redis_sismember', description: 'Check if a value is a member of a set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, member: { type: 'string', description: 'Member to check' } }, required: ['key', 'member'] } },
        { name: 'upstash_redis_scard', description: 'Get the number of members in a set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' } }, required: ['key'] } },
        { name: 'upstash_redis_spop', description: 'Remove and return random member from set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, count: { type: 'number', description: 'Number of members (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_srandmember', description: 'Get random member from set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, count: { type: 'number', description: 'Number of members (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_smove', description: 'Move member from one set to another', inputSchema: { type: 'object', properties: { source: { type: 'string', description: 'Source set' }, destination: { type: 'string', description: 'Destination set' }, member: { type: 'string', description: 'Member to move' } }, required: ['source', 'destination', 'member'] } },
        { name: 'upstash_redis_sunion', description: 'Union multiple sets', inputSchema: { type: 'object', properties: { keys: { type: 'array', items: { type: 'string' }, description: 'Set keys' } }, required: ['keys'] } },
        { name: 'upstash_redis_sinter', description: 'Intersect multiple sets', inputSchema: { type: 'object', properties: { keys: { type: 'array', items: { type: 'string' }, description: 'Set keys' } }, required: ['keys'] } },
        { name: 'upstash_redis_sdiff', description: 'Difference of sets', inputSchema: { type: 'object', properties: { keys: { type: 'array', items: { type: 'string' }, description: 'Set keys' } }, required: ['keys'] } },
        { name: 'upstash_redis_sunionstore', description: 'Union sets and store result', inputSchema: { type: 'object', properties: { destination: { type: 'string', description: 'Destination key' }, keys: { type: 'array', items: { type: 'string' }, description: 'Source keys' } }, required: ['destination', 'keys'] } },
        { name: 'upstash_redis_sinterstore', description: 'Intersect sets and store result', inputSchema: { type: 'object', properties: { destination: { type: 'string', description: 'Destination key' }, keys: { type: 'array', items: { type: 'string' }, description: 'Source keys' } }, required: ['destination', 'keys'] } },
        { name: 'upstash_redis_sdiffstore', description: 'Difference of sets and store result', inputSchema: { type: 'object', properties: { destination: { type: 'string', description: 'Destination key' }, keys: { type: 'array', items: { type: 'string' }, description: 'Source keys' } }, required: ['destination', 'keys'] } },
        { name: 'upstash_redis_sscan', description: 'Incrementally iterate set members', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Set key' }, cursor: { type: 'string', description: 'Cursor' }, match: { type: 'string', description: 'Pattern' }, count: { type: 'number', description: 'Count hint' } }, required: ['key', 'cursor'] } },

        // ============================================================
        // UPSTASH REDIS REST API - SORTED SET OPERATIONS (23 tools)
        // ============================================================
        { name: 'upstash_redis_zadd', description: 'Add one or more members to a sorted set with scores', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, members: { type: 'array', items: { type: 'object', properties: { score: { type: 'number' }, value: { type: 'string' } } }, description: 'Array of {score, value} objects' } }, required: ['key', 'members'] } },
        { name: 'upstash_redis_zrange', description: 'Get a range of members from a sorted set by index', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, start: { type: 'number', description: 'Start index' }, stop: { type: 'number', description: 'Stop index' }, withScores: { type: 'boolean', description: 'Include scores in result' } }, required: ['key', 'start', 'stop'] } },
        { name: 'upstash_redis_zrem', description: 'Remove one or more members from a sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, members: { type: 'array', items: { type: 'string' }, description: 'Members to remove' } }, required: ['key', 'members'] } },
        { name: 'upstash_redis_zscore', description: 'Get the score of a member in a sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, member: { type: 'string', description: 'Member to get score for' } }, required: ['key', 'member'] } },
        { name: 'upstash_redis_zcard', description: 'Get the number of members in a sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' } }, required: ['key'] } },
        { name: 'upstash_redis_zrank', description: 'Get the rank of a member in a sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, member: { type: 'string', description: 'Member to get rank for' } }, required: ['key', 'member'] } },
        { name: 'upstash_redis_zrevrank', description: 'Get the reverse rank of a member in a sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, member: { type: 'string', description: 'Member' } }, required: ['key', 'member'] } },
        { name: 'upstash_redis_zrangebyscore', description: 'Get members in sorted set by score range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min score' }, max: { type: 'string', description: 'Max score' }, withscores: { type: 'boolean', description: 'Include scores' } }, required: ['key', 'min', 'max'] } },
        { name: 'upstash_redis_zrevrangebyscore', description: 'Get members in sorted set by score range (reverse order)', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, max: { type: 'string', description: 'Max score' }, min: { type: 'string', description: 'Min score' }, withscores: { type: 'boolean', description: 'Include scores' } }, required: ['key', 'max', 'min'] } },
        { name: 'upstash_redis_zremrangebyrank', description: 'Remove members by rank range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, start: { type: 'number', description: 'Start rank' }, stop: { type: 'number', description: 'Stop rank' } }, required: ['key', 'start', 'stop'] } },
        { name: 'upstash_redis_zremrangebyscore', description: 'Remove members by score range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min score' }, max: { type: 'string', description: 'Max score' } }, required: ['key', 'min', 'max'] } },
        { name: 'upstash_redis_zpopmin', description: 'Remove and return members with lowest scores', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, count: { type: 'number', description: 'Number of members (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_zpopmax', description: 'Remove and return members with highest scores', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, count: { type: 'number', description: 'Number of members (optional)' } }, required: ['key'] } },
        { name: 'upstash_redis_zincrby', description: 'Increment score of member in sorted set', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, increment: { type: 'number', description: 'Increment amount' }, member: { type: 'string', description: 'Member' } }, required: ['key', 'increment', 'member'] } },
        { name: 'upstash_redis_zcount', description: 'Count members in score range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min score' }, max: { type: 'string', description: 'Max score' } }, required: ['key', 'min', 'max'] } },
        { name: 'upstash_redis_zunionstore', description: 'Union sorted sets and store result', inputSchema: { type: 'object', properties: { destination: { type: 'string', description: 'Destination key' }, keys: { type: 'array', items: { type: 'string' }, description: 'Source keys' }, weights: { type: 'array', items: { type: 'number' }, description: 'Weights (optional)' } }, required: ['destination', 'keys'] } },
        { name: 'upstash_redis_zinterstore', description: 'Intersect sorted sets and store result', inputSchema: { type: 'object', properties: { destination: { type: 'string', description: 'Destination key' }, keys: { type: 'array', items: { type: 'string' }, description: 'Source keys' }, weights: { type: 'array', items: { type: 'number' }, description: 'Weights (optional)' } }, required: ['destination', 'keys'] } },
        { name: 'upstash_redis_zscan', description: 'Incrementally iterate sorted set members', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, cursor: { type: 'string', description: 'Cursor' }, match: { type: 'string', description: 'Pattern' }, count: { type: 'number', description: 'Count hint' } }, required: ['key', 'cursor'] } },
        { name: 'upstash_redis_zrangebylex', description: 'Get members by lexicographical range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min value' }, max: { type: 'string', description: 'Max value' } }, required: ['key', 'min', 'max'] } },
        { name: 'upstash_redis_zrevrangebylex', description: 'Get members by lexicographical range (reverse)', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, max: { type: 'string', description: 'Max value' }, min: { type: 'string', description: 'Min value' } }, required: ['key', 'max', 'min'] } },
        { name: 'upstash_redis_zremrangebylex', description: 'Remove members by lexicographical range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min value' }, max: { type: 'string', description: 'Max value' } }, required: ['key', 'min', 'max'] } },
        { name: 'upstash_redis_zlexcount', description: 'Count members in lexicographical range', inputSchema: { type: 'object', properties: { key: { type: 'string', description: 'Sorted set key' }, min: { type: 'string', description: 'Min value' }, max: { type: 'string', description: 'Max value' } }, required: ['key', 'min', 'max'] } },

