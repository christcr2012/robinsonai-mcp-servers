        // PROJECT MANAGEMENT (13 tools)
        { name: 'neon_list_projects', description: 'Lists the first 10 Neon projects. Increase limit or use search to filter.', inputSchema: { type: 'object', properties: { limit: { type: 'number' }, search: { type: 'string' }, cursor: { type: 'string' }, org_id: { type: 'string' } } } },
        { name: 'neon_list_organizations', description: 'Lists all organizations the user has access to.', inputSchema: { type: 'object', properties: { search: { type: 'string' } } } },
        { name: 'neon_list_shared_projects', description: 'Lists projects shared with the current user.', inputSchema: { type: 'object', properties: { limit: { type: 'number' }, search: { type: 'string' }, cursor: { type: 'string' } } } },
        { name: 'neon_create_project', description: 'Create a new Neon project.', inputSchema: { type: 'object', properties: { name: { type: 'string' }, org_id: { type: 'string' }, region_id: { type: 'string' }, pg_version: { type: 'number' } } } },
        { name: 'neon_delete_project', description: 'Delete a Neon project.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_describe_project', description: 'Get detailed project information.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_update_project', description: 'Update project settings.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, name: { type: 'string' }, settings: { type: 'object' } }, required: ['projectId'] } },
        { name: 'neon_get_project_operations', description: 'List recent operations on a project.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_get_project_consumption', description: 'Get consumption metrics (compute hours, storage).', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_set_project_settings', description: 'Configure project-level settings.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, settings: { type: 'object' } }, required: ['projectId', 'settings'] } },
        { name: 'neon_get_project_quotas', description: 'View current quotas and limits.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_clone_project', description: 'Clone entire project with all branches.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, name: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_project_permissions', description: 'List users/roles with access to project.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },

        // BRANCH MANAGEMENT (20 tools)
        { name: 'neon_create_branch', description: 'Create a new branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchName: { type: 'string' }, parent_id: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_delete_branch', description: 'Delete a branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_describe_branch', description: 'Get tree view of all objects in a branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_reset_from_parent', description: 'Reset branch to parent state.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchIdOrName: { type: 'string' }, preserveUnderName: { type: 'string' } }, required: ['projectId', 'branchIdOrName'] } },
        { name: 'neon_update_branch', description: 'Update branch settings.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, name: { type: 'string' }, protected: { type: 'boolean' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_list_branches', description: 'List all branches with filtering.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, search: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_branch_details', description: 'Get detailed branch information.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_restore_branch', description: 'Restore deleted branch from backup.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, timestamp: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_set_branch_protection', description: 'Protect/unprotect branches.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, protected: { type: 'boolean' } }, required: ['projectId', 'branchId', 'protected'] } },
        { name: 'neon_get_branch_schema_diff', description: 'Compare schemas between branches.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, sourceBranchId: { type: 'string' }, targetBranchId: { type: 'string' } }, required: ['projectId', 'sourceBranchId', 'targetBranchId'] } },
        { name: 'neon_get_branch_data_diff', description: 'Compare data between branches.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, sourceBranchId: { type: 'string' }, targetBranchId: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId', 'sourceBranchId', 'targetBranchId'] } },
        { name: 'neon_merge_branches', description: 'Merge one branch into another.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, sourceBranchId: { type: 'string' }, targetBranchId: { type: 'string' } }, required: ['projectId', 'sourceBranchId', 'targetBranchId'] } },
        { name: 'neon_promote_branch', description: 'Promote branch to primary.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_set_branch_retention', description: 'Configure branch retention policies.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, retentionDays: { type: 'number' } }, required: ['projectId', 'branchId', 'retentionDays'] } },
        { name: 'neon_get_branch_history', description: 'Get branch creation/modification history.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_restore_branch_to_timestamp', description: 'Point-in-time recovery for branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, timestamp: { type: 'string' } }, required: ['projectId', 'branchId', 'timestamp'] } },
        { name: 'neon_get_branch_size', description: 'Get storage size of branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_set_branch_compute_settings', description: 'Configure compute for specific branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, settings: { type: 'object' } }, required: ['projectId', 'branchId', 'settings'] } },
        { name: 'neon_get_branch_connections', description: 'List active connections to branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_list_branch_computes', description: 'List compute endpoints for branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId'] } },

        // SQL EXECUTION (10 tools)
        { name: 'neon_run_sql', description: 'Execute a single SQL statement.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'sql'] } },
        { name: 'neon_run_sql_transaction', description: 'Execute multiple SQL statements in a transaction.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sqlStatements: { type: 'array', items: { type: 'string' } } }, required: ['projectId', 'sqlStatements'] } },
        { name: 'neon_get_connection_string', description: 'Get PostgreSQL connection string.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, roleName: { type: 'string' }, computeId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_database_tables', description: 'List all tables in database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_describe_table_schema', description: 'Get table schema definition.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId', 'tableName'] } },
        { name: 'neon_explain_sql_statement', description: 'Get query execution plan.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' }, analyze: { type: 'boolean' } }, required: ['projectId', 'sql'] } },
        { name: 'neon_list_slow_queries', description: 'Find slow queries using pg_stat_statements.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, computeId: { type: 'string' }, limit: { type: 'number' }, minExecutionTime: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_optimize_query', description: 'AI-powered query optimization.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'sql'] } },
        { name: 'neon_suggest_indexes', description: 'Intelligent index suggestions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_analyze_query_plan', description: 'Deep query plan analysis.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'sql'] } },

        // DATABASE MANAGEMENT (12 tools)
        { name: 'neon_create_database', description: 'Create new database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, owner: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_delete_database', description: 'Delete database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_list_databases', description: 'List all databases.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_database_size', description: 'Get database storage size.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_get_database_stats', description: 'Get database statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_vacuum_database', description: 'Run VACUUM on database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, full: { type: 'boolean' }, analyze: { type: 'boolean' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_analyze_database', description: 'Run ANALYZE on database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_reindex_database', description: 'Reindex database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_get_database_locks', description: 'View current locks.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_kill_database_query', description: 'Terminate running query.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, pid: { type: 'number' } }, required: ['projectId', 'databaseName', 'pid'] } },
        { name: 'neon_get_database_activity', description: 'View current database activity.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },
        { name: 'neon_backup_database', description: 'Create manual backup.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId', 'databaseName'] } },

        // MIGRATIONS (2 tools)
        { name: 'neon_prepare_database_migration', description: 'Prepare database migration in temporary branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, databaseName: { type: 'string' }, migrationSql: { type: 'string' } }, required: ['projectId', 'migrationSql'] } },
        { name: 'neon_complete_database_migration', description: 'Complete and apply migration to main branch.', inputSchema: { type: 'object', properties: { migrationId: { type: 'string' } }, required: ['migrationId'] } },

        // SETUP AUTOMATION (6 tools) - NEW! For autonomous RAD system setup
        { name: 'neon_create_project_for_rad', description: 'Create Neon project specifically for RAD Crawler system with optimal settings.', inputSchema: { type: 'object', properties: { name: { type: 'string', description: 'Project name (default: RAD Crawler)', default: 'RAD Crawler' }, region: { type: 'string', description: 'Region (default: us-east-1)', default: 'us-east-1' }, org_id: { type: 'string', description: 'Organization ID (optional)' } } } },
        { name: 'neon_deploy_schema', description: 'Deploy SQL schema file to database. Supports multi-statement SQL files.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string', description: 'Branch ID (optional, uses main if not specified)' }, databaseName: { type: 'string', description: 'Database name (optional, uses default if not specified)' }, schemaSQL: { type: 'string', description: 'Full SQL schema content' } }, required: ['projectId', 'schemaSQL'] } },
        { name: 'neon_verify_schema', description: 'Verify that required tables exist in database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, requiredTables: { type: 'array', items: { type: 'string' }, description: 'List of table names that must exist' } }, required: ['projectId', 'requiredTables'] } },
        { name: 'neon_get_connection_uri', description: 'Get full PostgreSQL connection URI for application use.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string', description: 'Branch ID (optional, uses main if not specified)' }, databaseName: { type: 'string', description: 'Database name (optional, uses default if not specified)' }, pooled: { type: 'boolean', description: 'Use connection pooling (default: true)', default: true } }, required: ['projectId'] } },
        { name: 'neon_setup_rad_database', description: 'Complete autonomous setup: create project, database, deploy schema, verify. Returns connection URI.', inputSchema: { type: 'object', properties: { projectName: { type: 'string', default: 'RAD Crawler' }, databaseName: { type: 'string', default: 'rad_production' }, region: { type: 'string', default: 'us-east-1' }, schemaSQL: { type: 'string', description: 'Full SQL schema to deploy' }, org_id: { type: 'string' } }, required: ['schemaSQL'] } },
        { name: 'neon_check_api_key', description: 'Check if Neon API key is configured and valid.', inputSchema: { type: 'object', properties: {} } },

        // QUERY TUNING (2 tools)
        { name: 'neon_prepare_query_tuning', description: 'Analyze and prepare query optimizations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' }, roleName: { type: 'string' } }, required: ['projectId', 'databaseName', 'sql'] } },
        { name: 'neon_complete_query_tuning', description: 'Apply or discard query optimizations.', inputSchema: { type: 'object', properties: { tuningId: { type: 'string' }, projectId: { type: 'string' }, databaseName: { type: 'string' }, temporaryBranchId: { type: 'string' }, suggestedSqlStatements: { type: 'array', items: { type: 'string' } }, applyChanges: { type: 'boolean' }, branchId: { type: 'string' }, roleName: { type: 'string' }, shouldDeleteTemporaryBranch: { type: 'boolean' } }, required: ['tuningId', 'projectId', 'databaseName', 'temporaryBranchId', 'suggestedSqlStatements'] } },

        // ROLE MANAGEMENT (8 tools)
        { name: 'neon_create_role', description: 'Create database role.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' }, password: { type: 'string' } }, required: ['projectId', 'roleName'] } },
        { name: 'neon_delete_role', description: 'Delete database role.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' } }, required: ['projectId', 'roleName'] } },
        { name: 'neon_list_roles', description: 'List all roles.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_update_role', description: 'Update role permissions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' }, permissions: { type: 'object' } }, required: ['projectId', 'roleName'] } },
        { name: 'neon_grant_role_permissions', description: 'Grant specific permissions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' }, permissions: { type: 'array' } }, required: ['projectId', 'roleName', 'permissions'] } },
        { name: 'neon_revoke_role_permissions', description: 'Revoke permissions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' }, permissions: { type: 'array' } }, required: ['projectId', 'roleName', 'permissions'] } },
        { name: 'neon_get_role_permissions', description: 'List role permissions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' } }, required: ['projectId', 'roleName'] } },
        { name: 'neon_reset_role_password', description: 'Reset role password.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' }, password: { type: 'string' } }, required: ['projectId', 'roleName', 'password'] } },

        // COMPUTE/ENDPOINT MANAGEMENT (10 tools)
        { name: 'neon_create_endpoint', description: 'Create compute endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, type: { type: 'string' }, settings: { type: 'object' } }, required: ['projectId', 'branchId', 'type'] } },
        { name: 'neon_delete_endpoint', description: 'Delete endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_update_endpoint', description: 'Update endpoint settings.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, settings: { type: 'object' } }, required: ['projectId', 'endpointId', 'settings'] } },
        { name: 'neon_start_endpoint', description: 'Start suspended endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_suspend_endpoint', description: 'Suspend endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_restart_endpoint', description: 'Restart endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_get_endpoint_metrics', description: 'Get endpoint performance metrics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_set_endpoint_autoscaling', description: 'Configure autoscaling.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, minCu: { type: 'number' }, maxCu: { type: 'number' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_get_endpoint_logs', description: 'Retrieve endpoint logs.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_set_endpoint_pooling', description: 'Configure connection pooling.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, poolMode: { type: 'string' }, poolSize: { type: 'number' } }, required: ['projectId', 'endpointId'] } },

        // MONITORING & ANALYTICS (15 tools)
        { name: 'neon_get_query_statistics', description: 'Get query performance stats.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_get_slow_query_log', description: 'Enhanced slow query analysis.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, minDuration: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_get_connection_stats', description: 'Connection pool statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_storage_metrics', description: 'Storage usage over time.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_compute_metrics', description: 'Compute usage over time.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_io_metrics', description: 'I/O performance metrics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_cache_hit_ratio', description: 'Cache performance metrics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_index_usage', description: 'Index usage statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_table_bloat', description: 'Identify bloated tables.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_replication_lag', description: 'Check replication status.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_checkpoint_stats', description: 'Checkpoint statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_wal_stats', description: 'WAL statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_set_monitoring_alerts', description: 'Configure alerts.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, alertType: { type: 'string' }, threshold: { type: 'number' }, email: { type: 'string' } }, required: ['projectId', 'alertType', 'threshold'] } },
        { name: 'neon_get_alert_history', description: 'View alert history.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_get_performance_insights', description: 'AI-powered performance recommendations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },

        // BACKUP & RECOVERY (8 tools)
        { name: 'neon_list_backups', description: 'List available backups.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_create_backup', description: 'Create manual backup.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, name: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_restore_backup', description: 'Restore from backup.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, backupId: { type: 'string' }, targetBranchId: { type: 'string' } }, required: ['projectId', 'backupId'] } },
        { name: 'neon_delete_backup', description: 'Delete backup.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, backupId: { type: 'string' } }, required: ['projectId', 'backupId'] } },
        { name: 'neon_get_backup_status', description: 'Check backup status.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, backupId: { type: 'string' } }, required: ['projectId', 'backupId'] } },
        { name: 'neon_schedule_backup', description: 'Schedule automated backups.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, schedule: { type: 'string' } }, required: ['projectId', 'branchId', 'schedule'] } },
        { name: 'neon_export_backup', description: 'Export backup to external storage.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, backupId: { type: 'string' }, destination: { type: 'string' } }, required: ['projectId', 'backupId', 'destination'] } },
        { name: 'neon_validate_backup', description: 'Verify backup integrity.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, backupId: { type: 'string' } }, required: ['projectId', 'backupId'] } },

        // SECURITY & COMPLIANCE (10 tools)
        { name: 'neon_enable_ip_allowlist', description: 'Configure IP allowlist.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, ipAddresses: { type: 'array', items: { type: 'string' } } }, required: ['projectId', 'ipAddresses'] } },
        { name: 'neon_get_ip_allowlist', description: 'View IP allowlist.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_enable_ssl_enforcement', description: 'Enforce SSL connections.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, enforce: { type: 'boolean' } }, required: ['projectId', 'enforce'] } },
        { name: 'neon_rotate_credentials', description: 'Rotate database credentials.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, roleName: { type: 'string' } }, required: ['projectId', 'roleName'] } },
        { name: 'neon_get_audit_log', description: 'Retrieve audit logs.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_enable_encryption', description: 'Configure encryption settings.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, encryptionType: { type: 'string' } }, required: ['projectId', 'encryptionType'] } },
        { name: 'neon_get_security_scan', description: 'Run security vulnerability scan.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_set_password_policy', description: 'Configure password policies.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, policy: { type: 'object' } }, required: ['projectId', 'policy'] } },
        { name: 'neon_enable_2fa', description: 'Enable two-factor authentication.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, enabled: { type: 'boolean' } }, required: ['projectId', 'enabled'] } },
        { name: 'neon_get_compliance_report', description: 'Generate compliance reports.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, reportType: { type: 'string' } }, required: ['projectId', 'reportType'] } },

        // COST MANAGEMENT (8 tools)
        { name: 'neon_get_cost_breakdown', description: 'Detailed cost analysis.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_cost_forecast', description: 'Predict future costs.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, days: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_set_cost_alerts', description: 'Configure cost alerts.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, threshold: { type: 'number' }, email: { type: 'string' } }, required: ['projectId', 'threshold'] } },
        { name: 'neon_get_cost_optimization_tips', description: 'AI-powered cost optimization.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_billing_history', description: 'View billing history.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, months: { type: 'number' } }, required: ['projectId'] } },
        { name: 'neon_export_cost_report', description: 'Export cost reports.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, format: { type: 'string' }, from: { type: 'string' }, to: { type: 'string' } }, required: ['projectId', 'format'] } },
        { name: 'neon_set_budget_limits', description: 'Configure budget limits.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, monthlyLimit: { type: 'number' } }, required: ['projectId', 'monthlyLimit'] } },
        { name: 'neon_get_resource_recommendations', description: 'Right-sizing recommendations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },

        // INTEGRATION & WEBHOOKS (6 tools)
        { name: 'neon_create_webhook', description: 'Create webhook for events.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, url: { type: 'string' }, events: { type: 'array', items: { type: 'string' } } }, required: ['projectId', 'url', 'events'] } },
        { name: 'neon_list_webhooks', description: 'List configured webhooks.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_delete_webhook', description: 'Delete webhook.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, webhookId: { type: 'string' } }, required: ['projectId', 'webhookId'] } },
        { name: 'neon_test_webhook', description: 'Test webhook delivery.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, webhookId: { type: 'string' } }, required: ['projectId', 'webhookId'] } },
        { name: 'neon_get_webhook_logs', description: 'View webhook delivery logs.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, webhookId: { type: 'string' }, limit: { type: 'number' } }, required: ['projectId', 'webhookId'] } },
        { name: 'neon_create_api_key', description: 'Generate API keys.', inputSchema: { type: 'object', properties: { name: { type: 'string' }, scopes: { type: 'array', items: { type: 'string' } } }, required: ['name'] } },

        // ADVANCED SQL TOOLS (10 tools)
        { name: 'neon_detect_n_plus_one', description: 'Detect N+1 query problems.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_suggest_partitioning', description: 'Table partitioning recommendations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId', 'tableName'] } },
        { name: 'neon_analyze_table_statistics', description: 'Detailed table statistics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId', 'tableName'] } },
        { name: 'neon_suggest_vacuum_strategy', description: 'VACUUM optimization.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_detect_missing_indexes', description: 'Find missing indexes.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_analyze_join_performance', description: 'Join optimization analysis.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'sql'] } },
        { name: 'neon_suggest_materialized_views', description: 'Materialized view recommendations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_table_dependencies', description: 'Analyze table dependencies.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, tableName: { type: 'string' } }, required: ['projectId', 'tableName'] } },
        { name: 'neon_suggest_query_rewrite', description: 'Query rewrite suggestions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'sql'] } },
        { name: 'neon_analyze_deadlocks', description: 'Deadlock analysis and prevention.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },

        // NEON AUTH (1 tool)
        { name: 'neon_provision_neon_auth', description: 'Provision Neon Auth with Stack Auth integration.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, database: { type: 'string' } }, required: ['projectId'] } },

        // API KEY MANAGEMENT (3 tools)
        { name: 'neon_list_api_keys', description: 'List all API keys for the account.', inputSchema: { type: 'object', properties: {} } },
        { name: 'neon_create_api_key_for_project', description: 'Create project-specific API key.', inputSchema: { type: 'object', properties: { keyName: { type: 'string' }, projectId: { type: 'string' } }, required: ['keyName'] } },
        { name: 'neon_revoke_api_key', description: 'Revoke/delete API key.', inputSchema: { type: 'object', properties: { keyId: { type: 'string' } }, required: ['keyId'] } },

        // CONNECTION POOLING (2 tools)
        { name: 'neon_get_connection_pooler_config', description: 'Get connection pooler configuration.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' } }, required: ['projectId', 'endpointId'] } },
        { name: 'neon_update_connection_pooler_config', description: 'Update pooler settings (PgBouncer).', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, endpointId: { type: 'string' }, poolMode: { type: 'string' }, poolSize: { type: 'number' }, maxClientConn: { type: 'number' } }, required: ['projectId', 'endpointId'] } },

        // READ REPLICAS (2 tools)
        { name: 'neon_create_read_replica', description: 'Create read replica endpoint.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, region: { type: 'string' } }, required: ['projectId', 'branchId'] } },
        { name: 'neon_list_read_replicas', description: 'List all read replicas for a branch.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' } }, required: ['projectId', 'branchId'] } },

        // PROJECT SHARING & COLLABORATION (3 tools)
        { name: 'neon_share_project', description: 'Share project with another user.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, email: { type: 'string' }, role: { type: 'string' } }, required: ['projectId', 'email'] } },
        { name: 'neon_list_project_shares', description: 'List all project shares.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_revoke_project_share', description: 'Remove project access.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, shareId: { type: 'string' } }, required: ['projectId', 'shareId'] } },

        // EXTENSION MANAGEMENT (5 tools)
        { name: 'neon_list_extensions', description: 'List available PostgreSQL extensions.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_enable_extension', description: 'Enable a PostgreSQL extension.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, extensionName: { type: 'string' }, schema: { type: 'string' } }, required: ['projectId', 'extensionName'] } },
        { name: 'neon_disable_extension', description: 'Disable a PostgreSQL extension.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, extensionName: { type: 'string' } }, required: ['projectId', 'extensionName'] } },
        { name: 'neon_get_extension_details', description: 'Get extension information and dependencies.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, extensionName: { type: 'string' } }, required: ['projectId', 'extensionName'] } },
        { name: 'neon_update_extension', description: 'Update extension to latest version.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, extensionName: { type: 'string' }, version: { type: 'string' } }, required: ['projectId', 'extensionName'] } },

        // SCHEMA MIGRATIONS (3 tools)
        { name: 'neon_create_migration', description: 'Create a new schema migration.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, name: { type: 'string' }, sql: { type: 'string' } }, required: ['projectId', 'name', 'sql'] } },
        { name: 'neon_list_migrations', description: 'List all schema migrations.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_rollback_migration', description: 'Rollback a schema migration.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, migrationId: { type: 'string' } }, required: ['projectId', 'migrationId'] } },

        // ADVANCED CONNECTION MANAGEMENT (3 tools)
        { name: 'neon_get_connection_uri', description: 'Get formatted connection URI for different clients.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, roleName: { type: 'string' }, pooled: { type: 'boolean' }, format: { type: 'string', enum: ['psql', 'jdbc', 'node', 'python', 'go', 'rust'] } }, required: ['projectId'] } },
        { name: 'neon_test_connection', description: 'Test database connection and return latency.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, roleName: { type: 'string' } }, required: ['projectId'] } },
        { name: 'neon_get_connection_examples', description: 'Get code examples for connecting to database.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, databaseName: { type: 'string' }, language: { type: 'string', enum: ['javascript', 'typescript', 'python', 'go', 'rust', 'java', 'php', 'ruby'] } }, required: ['projectId'] } },

        // PROJECT TEMPLATES (2 tools)
        { name: 'neon_create_from_template', description: 'Create project from template.', inputSchema: { type: 'object', properties: { templateId: { type: 'string' }, name: { type: 'string' }, region: { type: 'string' } }, required: ['templateId', 'name'] } },
        { name: 'neon_list_templates', description: 'List available project templates.', inputSchema: { type: 'object', properties: { category: { type: 'string' } } } },

        // ADVANCED MONITORING (2 tools)
        { name: 'neon_get_real_time_metrics', description: 'Get real-time performance metrics.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, branchId: { type: 'string' }, metrics: { type: 'array', items: { type: 'string' } } }, required: ['projectId'] } },
        { name: 'neon_export_metrics', description: 'Export metrics to external monitoring system.', inputSchema: { type: 'object', properties: { projectId: { type: 'string' }, destination: { type: 'string', enum: ['prometheus', 'datadog', 'grafana', 'cloudwatch'] }, config: { type: 'object' } }, required: ['projectId', 'destination'] } }
